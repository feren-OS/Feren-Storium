#!/usr/bin/python3
import os
import sys
import subprocess
import time
import shutil
import ast
import json

from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtQml import * #Needs python3-pyqt5.qtquick

from xdg.DesktopEntry import DesktopEntry

sys.path.insert(0, "/usr/lib/feren-storium/modules/packagemgmt/solstice")
import moduleshared as IceModuleShared #TODO: Move these into their own importable module
import ferensolstice

IceShared = IceModuleShared.main()

browserSources = IceShared.sources_storage["browsers"]
currentlyEditedProfileID = ""
autoDestinationProfile = ""

#######################################################################################
# Solstice Interface - Feren Storium                                                  #
#                                                                                     #
# Rest in Peace, Mark Greaves.                                                        #
#######################################################################################

QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)

## Model for profile selector
class ProfilesModel(QAbstractListModel):
    NameRole = Qt.UserRole + 1
    IDRole = Qt.UserRole + 2

    def __init__(self, parent=None):
        super().__init__(parent)
        self.profiles = []

    def data(self, index, role=Qt.DisplayRole):
        row = index.row()
        if role == ProfilesModel.NameRole:
            return self.profiles[row]["myname"]
        if role == ProfilesModel.IDRole:
            return self.profiles[row]["profileid"]

    def rowCount(self, parent=QModelIndex()):
        return len(self.profiles)

    def roleNames(self):
        return {ProfilesModel.NameRole: b'myname', ProfilesModel.IDRole: b'profileid'}

    def setData(self, data):
        self.profiles = data
        self.layoutChanged.emit()


## Code to initialise/refresh the desktop file information used for profile creation and launching
def getDesktopFileInformation(path):
    global desktopfileinformation
    entry=DesktopEntry()
    entry.parse(path)
    desktopfileinformation = {}

    parentidtest = entry.get("X-FerenIce-ParentID")
    #Add basic information for GUI
    if parentidtest != '': #If this is a subshortcut, add the values from the original shortcut, alongside an indication for the GUI to use our subshortcut's class
        desktopfileinformation["guiname"] = entry.getName()
        desktopfileinformation["guiwmclass"] = entry.getStartupWMClass()
        desktopfileinformation["guiwebsite"] = entry.get("X-FerenIce-Website")
        entry.parse(path.replace(entry.get("X-FerenIce-ID"), parentidtest))

    desktopfileinformation["name"] = entry.getName()
    desktopfileinformation["wmclass"] = entry.getStartupWMClass()
    desktopfileinformation["website"] = entry.get("X-FerenIce-Website")
    desktopfileinformation["browser"] = entry.get("X-FerenIce-Browser")
    desktopfileinformation["browsertype"] = entry.get("X-FerenIce-BrowserType")
    desktopfileinformation["id"] = entry.get("X-FerenIce-ID")
    desktopfileinformation["extraids"] = ast.literal_eval(entry.get("X-FerenIce-ExtraIDs"))
    desktopfileinformation["nohistory"] = strToBool(entry.get("X-FerenIce-NoHistory"))
    desktopfileinformation["googleinteg"] = strToBool(entry.get("X-FerenIce-Google"))
    desktopfileinformation["googlehangouts"] = strToBool(entry.get("X-FerenIce-GoogleHangouts"))
    desktopfileinformation["bonusids"] = ast.literal_eval(entry.get("X-FerenIce-BonusIDs"))
    desktopfileinformation["bg"] = entry.get("X-FerenIce-BG")
    desktopfileinformation["bgdark"] = entry.get("X-FerenIce-BG-Dark")
    desktopfileinformation["accent"] = entry.get("X-FerenIce-Accent")
    desktopfileinformation["accentdark"] = entry.get("X-FerenIce-Accent-Dark")
    desktopfileinformation["color"] = entry.get("X-FerenIce-Color")
    desktopfileinformation["accentonwindow"] = strToBool(entry.get("X-FerenIce-AccentWindow"))
    desktopfileinformation["lastupdated"] = entry.get("X-FerenIce-LastUpdate")

def strToBool(string):
    if string == "true":
        return True
    else:
        return False


## CREATE PROFILE
def onEnterCreateProfile():
    mainwnd.findChild(QObject, "editProfileHeader").setProperty('text', "Create a profile")
    global currentlyEditedProfileID
    currentlyEditedProfileID = ""
    mainwnd.findChild(QObject, "deleteProfileBtn").setProperty('enabled', False)

    mainwnd.findChild(QObject, "editProfileName").setProperty('text', "")
    mainwnd.findChild(QObject, "forceDarkMode").setProperty('checked', False)


    mainwnd.findChild(QObject, "pages").setProperty('currentIndex', 2)
    mainwnd.findChild(QObject, "editProfileName").forceActiveFocus(True)

def onCreateProfile():
    if mainwnd.findChild(QObject, "editProfileName").property('text') == "":
        mainwnd.findChild(QObject, "editProfileNameEmpty").setProperty('visible', True)
        return
    else:
        mainwnd.findChild(QObject, "editProfileNameEmpty").setProperty('visible', False)

    desiredname = mainwnd.findChild(QObject, "editProfileName").property('text')
    darkmode = mainwnd.findChild(QObject, "forceDarkMode").property('checked')

    #Now generate the profile's folder
    profileid = IceShared.profileid_generate(desktopfileinformation["id"], desiredname)
    IceShared.create_profile_folder(desktopfileinformation["id"], profileid, desktopfileinformation["browsertype"])
    #Then add in the initial settings
    IceShared.update_profile_settings(desktopfileinformation, desiredname, profileid, darkmode)

    #TODO: Add handlers for failure to create profile, invalid name, etc.

    onOpenProfile(profileid)

## EDIT PROFILE
def onEnterEditProfile(profileid):
    mainwnd.findChild(QObject, "editProfileHeader").setProperty('text', "Configuring profile")
    global currentlyEditedProfileID
    currentlyEditedProfileID = profileid
    mainwnd.findChild(QObject, "deleteProfileBtn").setProperty('enabled', True)

    #Restore settings
    readablename = profileid
    darkmode = False
    if os.path.isfile(profilesdir + "/" + profileid + "/.solstice-settings"):
        with open(profilesdir + "/" + profileid + "/.solstice-settings", 'r') as fp:
            icesettings = json.loads(fp.read())
            if "readablename" in icesettings:
                readablename = icesettings["readablename"]
            if "darkmode" in icesettings:
                darkmode = icesettings["darkmode"]

    mainwnd.findChild(QObject, "editProfileName").setProperty('text', readablename)
    mainwnd.findChild(QObject, "forceDarkMode").setProperty('checked', darkmode)

    mainwnd.findChild(QObject, "pages").setProperty('currentIndex', 2)
    mainwnd.findChild(QObject, "editProfileName").forceActiveFocus(True)

def onEditProfile():
    if mainwnd.findChild(QObject, "editProfileName").property('text') == "":
        mainwnd.findChild(QObject, "editProfileNameEmpty").setProperty('visible', True)
        return
    else:
        mainwnd.findChild(QObject, "editProfileNameEmpty").setProperty('visible', False)

    desiredname = mainwnd.findChild(QObject, "editProfileName").property('text')
    darkmode = mainwnd.findChild(QObject, "forceDarkMode").property('checked')

    profileid = IceShared.profileid_generate(desktopfileinformation["id"], desiredname)
    if currentlyEditedProfileID == "":
        #Now generate the profile's folder
        IceShared.create_profile_folder(desktopfileinformation["id"], profileid, desktopfileinformation["browsertype"])
    else:
        if currentlyEditedProfileID != profileid:
            try:
                os.rename(profilesdir + "/" + currentlyEditedProfileID, profilesdir + "/" + profileid)
            except Exception as e:
                print('TEMP: ' + e)

    #Then update their settings
    IceShared.update_profile_settings(desktopfileinformation, desiredname, profileid, darkmode)

    #TODO: Add handlers for failure to create profile, invalid name, etc.

    if currentlyEditedProfileID == "": #Launch into profile upon creation
        onOpenProfile(profileid, False)
    else: #Return to the profile manager otherwise
        mainwnd.findChild(QObject, "pages").setProperty('currentIndex', 1)
        refreshProfiles()
        if profilesmodel.profiles != []:
            mainwnd.findChild(QObject, "profileManager").forceActiveFocus(True)

def onDeleteProfile():
    global currentlyEditedProfileID

    #TODO: Code in killing their current process

    shutil.rmtree(profilesdir + "/" + currentlyEditedProfileID)
    mainwnd.findChild(QObject, "pages").setProperty('currentIndex', 1)
    refreshProfiles()


## PROFILES LOADING
def getProfiles():
    #Now get all the profiles
    profiles = []
    for folder in os.listdir(profilesdir):
        if os.path.isdir(profilesdir + "/" + folder):
            if os.path.isfile(profilesdir + "/" + folder + browserSources[desktopfileinformation["browser"]]["expected-file"]):
                readablename = folder
                if os.path.isfile(profilesdir + "/" + folder + "/.solstice-settings"):
                    with open(profilesdir + "/" + folder + "/.solstice-settings", 'r') as fp:
                        icesettings = json.loads(fp.read())
                        if "readablename" in icesettings:
                            readablename = icesettings["readablename"]
                profiles.append({"myname": readablename, "profileid": folder})

    return profiles
def refreshProfiles(profiles=[]):
    if profiles == []:
        profiles = getProfiles()
    if profiles == []:
        onEnterCreateProfile()
    profilesmodel.setData(profiles)

def automaticProfileLaunch():
    if os.path.isfile(profilesdir + "/.solstice-autolaunch"):
        global autoDestinationProfile
        autoDestinationProfile = ""
        with open(profilesdir + "/.solstice-autolaunch", 'r') as fp:
            autoDestinationProfile = fp.readline()

        if len(sys.argv) == 3:
            if sys.argv[2] == "--force-manager":
                return #Skip to the GUI if the override's specified

        if autoDestinationProfile == "":
            return #Skip to the GUI if there is no destination profile

        profilespossible = getProfiles()
        if not len(profilespossible) == 1:
            return #Skip to the GUI if more than one profile is present

        itemscounted = 0
        for profile in profilespossible:
            if profilespossible[itemscounted]["profileid"] == autoDestinationProfile:
                onOpenProfile(autoDestinationProfile, True, False)
                sys.exit(0) #End the code here
                break
            itemscounted = 1


## LAUNCHING CALLBACKS
def closeCallback(): #Close the window
    mainwnd.close()

def onOpenProfile(profileid, alwaysuse, gui=True):
    if gui == True:
        if alwaysuse == True: #In the future, automatically launch the current profile
            with open(profilesdir + "/.solstice-autolaunch", 'w') as fp:
                fp.write(profileid)
        else: #Delete the autostart otherwise
            if os.path.isfile(profilesdir + "/.solstice-autolaunch"):
                os.remove(profilesdir + "/.solstice-autolaunch")

    #TODO: Update profile before launching if the profile's outdated
    guiwebsite = desktopfileinformation["website"]
    if "guiwebsite" in desktopfileinformation:
        guiwebsite = desktopfileinformation["guiwebsite"]
    if gui == True:
        IceShared.run_profile(desktopfileinformation["id"], profileid, desktopfileinformation["browser"], desktopfileinformation["browsertype"], guiwebsite, desktopfileinformation["wmclass"], desktopfileinformation["nohistory"], closeCallback)
        app.quit()
    else:
        IceShared.run_profile(desktopfileinformation["id"], profileid, desktopfileinformation["browser"], desktopfileinformation["browsertype"], guiwebsite, desktopfileinformation["wmclass"], desktopfileinformation["nohistory"], None) #To prevent an exception


#[1]: .desktop file
desktopfileinformation = {} #First initialise the desktop file information variable
try: #Then get the values from the .desktop file, and add them in
    getDesktopFileInformation(str(sys.argv[1]))
except:
    sys.exit(1) #TODO: Show error indicating corrupted file

#Check the browser even has data for use in this
if not desktopfileinformation["browser"] in IceShared.sources_storage["browsers"]:
    sys.exit(1) #There is an invalid browser specification

#Assign profilesdir
profilesdir = IceShared.get_profiles_folder(desktopfileinformation["id"])

#Check browser is installed
browserInstalled = False
for browser in browserSources[desktopfileinformation["browser"]]["required-file"]:
    if os.path.isfile(browser):
        browserInstalled = True

#Automatically open profile if the application has been configured to launch the profile immediately
# Overridden by --force-manager
automaticProfileLaunch()


profilesmodel = ProfilesModel()
app = QApplication(sys.argv)

guiwmclass = desktopfileinformation["wmclass"]
if "guiwmclass" in desktopfileinformation:
    guiwmclass = desktopfileinformation["guiwmclass"]
app.setDesktopFileName(guiwmclass)
app.setApplicationName(guiwmclass)

engine = QQmlApplicationEngine()
engine.quit.connect(app.quit)
engine.rootContext().setContextProperty('ProfilesModel', profilesmodel)
engine.rootContext().setContextProperty('selectedManageProfiles', [])
engine.load('/usr/share/feren-storium/modules/packagemgmt-ice/icegui.qml')

mainwnd = engine.rootObjects()[0]
mainwnd.editProfile.connect(onEditProfile)
mainwnd.openProfile.connect(onOpenProfile)
mainwnd.enterEditProfile.connect(onEnterEditProfile)
mainwnd.enterCreateProfile.connect(onEnterCreateProfile)
mainwnd.deleteProfile.connect(onDeleteProfile)

guiname = desktopfileinformation["name"]
if "guiname" in desktopfileinformation:
    guiname = desktopfileinformation["guiname"]
mainwnd.setProperty('title', guiname)
mainwnd.findChild(QObject, "profilesHeader").setProperty('text', "Who's using %s?" % guiname)
mainwnd.findChild(QObject, "browsersHeader").setProperty('text', "Choose a browser to launch %s" % guiname)
mainwnd.findChild(QObject, "manageHeader").setProperty('text', "Manage %s Profiles" % guiname)
mainwnd.findChild(QObject, "editProfileSubheader").setProperty('text', "Choose your name, and options for your profile.\nOnce you are done. hit Finish below.")
#TODO: Add in label changing to translate the labels




#If browser isn't installed, react accordingly
if browserInstalled == False:
    pass #TODO: Screen for picking browser, and error if no browsers available to switch it to

#If profiles folder doesn't exist, create it.
if not os.path.isdir(profilesdir):
    IceShared.create_profiles_folder(desktopfileinformation["id"])

profiles = getProfiles()
refreshProfiles(profiles)

if len(sys.argv) == 3:
    if sys.argv[2] == "--force-manager" and os.path.isfile(profilesdir + "/.solstice-autolaunch") and autoDestinationProfile != "":
        #Restore the Always use Profile option's checked state if the automatically chosen profile is present and it is visible
        itemscounted = 0
        for profile in profiles:
            if profiles[itemscounted]["profileid"] == autoDestinationProfile:
                checkboxtarget = mainwnd.findChild(QObject, "alwaysUseProfile")
                checkboxtarget.setProperty('checked', len(profiles) == 1)
            itemscounted = 1



sys.exit(app.exec())

#!/usr/bin/python3
import os
import sys
import subprocess
import time
import shutil
import ast

from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtQml import * #Needs python3-pyqt5.qtquick

from xdg.DesktopEntry import DesktopEntry

sys.path.insert(0, "/usr/lib/feren-storium/modules/packagemgmt/peppermint-ice")
import moduleshared as IceModuleShared #TODO: Move these into their own importable module
IceShared = IceModuleShared.main()

browserSources = IceShared.sources_storage["browsers"]

#######################################################################################
# Ice Launcher Interface - Feren Storium                                              #
#                                                                                     #
# Rest in Peace, Mark Greaves.                                                        #
#######################################################################################

## Model for profile selector
class ProfilesModel(QAbstractListModel):
    NameRole = Qt.UserRole + 1
    IDRole = Qt.UserRole + 2
    profilesChanged = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.profiles = []

    def data(self, index, role=Qt.DisplayRole):
        row = index.row()
        if role == ProfilesModel.NameRole:
            return self.profiles[row]["myname"]
        if role == ProfilesModel.IDRole:
            return self.profiles[row]["profileid"]

    def rowCount(self, parent=QModelIndex()):
        return len(self.profiles)

    def roleNames(self):
        return {ProfilesModel.NameRole: b'myname', ProfilesModel.IDRole: b'profileid'}

    def setData(self, data):
        self.profiles = data
        self.layoutChanged.emit()


## Code to initialise/refresh the desktop file information used for profile creation and launching
def getDesktopFileInformation(path):
    global desktopfileinformation
    entry=DesktopEntry()
    entry.parse(path)

    desktopfileinformation = {}
    #Add basic information for GUI
    desktopfileinformation["name"] = entry.getName()
    desktopfileinformation["wmclass"] = entry.getStartupWMClass()
    #Add custom settings
    desktopfileinformation["browser"] = entry.get("X-FerenIce-Browser")
    desktopfileinformation["browsertype"] = entry.get("X-FerenIce-BrowserType")
    desktopfileinformation["id"] = entry.get("X-FerenIce-ID")
    desktopfileinformation["website"] = entry.get("X-FerenIce-Website")
    desktopfileinformation["extraids"] = ast.literal_eval(entry.get("X-FerenIce-ExtraIDs"))
    desktopfileinformation["nohistory"] = strToBool(entry.get("X-FerenIce-NoHistory"))
    desktopfileinformation["googleinteg"] = strToBool(entry.get("X-FerenIce-Google"))
    desktopfileinformation["googlehangouts"] = strToBool(entry.get("X-FerenIce-GoogleHangouts"))
    desktopfileinformation["bonusids"] = ast.literal_eval(entry.get("X-FerenIce-BonusIDs"))
    desktopfileinformation["bg"] = entry.get("X-FerenIce-BG")
    desktopfileinformation["bgdark"] = entry.get("X-FerenIce-BG-Dark")
    desktopfileinformation["accent"] = entry.get("X-FerenIce-Accent")
    desktopfileinformation["accentdark"] = entry.get("X-FerenIce-Accent-Dark")
    desktopfileinformation["color"] = entry.get("X-FerenIce-Color")
    desktopfileinformation["accentonwindow"] = strToBool(entry.get("X-FerenIce-AccentWindow"))
    desktopfileinformation["lastupdated"] = entry.get("X-FerenIce-LastUpdate")

def strToBool(string):
    if string == "true":
        return True
    else:
        return False


## CREATE PROFILE
def onCreateProfile():
    if mainwnd.findChild(QObject, "editProfileName").property('text') == "":
        mainwnd.findChild(QObject, "editProfileNameEmpty").setProperty('visible', True)
        return
    else:
        mainwnd.findChild(QObject, "editProfileNameEmpty").setProperty('visible', False)

    desiredname = mainwnd.findChild(QObject, "editProfileName").property('text')
    darkmode = mainwnd.findChild(QObject, "forceDarkMode").property('checked')

    #Now generate the profile's folder
    IceShared.create_profile_folder(desktopfileinformation["id"], desiredname, desktopfileinformation["browsertype"])
    #Then add in the initial settings
    IceShared.update_profile_settings(desktopfileinformation, desiredname, darkmode)

    #TODO: Add handlers for failure to create profile, invalid name, etc.

    onOpenProfile(desiredname)
    app.quit()

def refreshProfiles():
    #Now get all the profiles
    profiles = []
    for folder in os.listdir(profilesdir):
        if os.path.isdir(profilesdir + "/" + folder):
            if os.path.isfile(profilesdir + "/" + folder + browserSources[desktopfileinformation["browser"]]["expected-file"]):
                profiles.append({"myname": folder, "profileid": folder})
                #TODO: Add profile IDs

    #If there's no profiles, go into the profile creator
    if profiles == []:
        mainwnd.findChild(QObject, "pages").setProperty('currentIndex', 4)
    else:
        profilesmodel.setData(profiles)


## LAUNCHING CALLBACKS
def closeCallback(): #Close the window
    mainwnd.close()

def onOpenProfile(profileid):
    IceShared.run_profile(desktopfileinformation["id"], profileid, desktopfileinformation["browser"], desktopfileinformation["browsertype"], desktopfileinformation["website"], desktopfileinformation["wmclass"], desktopfileinformation["nohistory"], closeCallback)


#[1]: .desktop file
desktopfileinformation = {} #First initialise the desktop file information variable
try: #Then get the values from the .desktop file, and add them in
    getDesktopFileInformation(str(sys.argv[1]))
except:
    sys.exit(1) #TODO: Show error indicating corrupted file

#Check the browser even has data for use in this
if not desktopfileinformation["browser"] in IceShared.sources_storage["browsers"]:
    sys.exit(1) #There is an invalid browser specification


#TODO: Store if application has been configured to be single profile before, and if so skip the GUI entirely unless an argument's specified
profilesmodel = ProfilesModel()
app = QApplication(sys.argv)

app.setDesktopFileName(desktopfileinformation["wmclass"])
app.setApplicationName(desktopfileinformation["wmclass"])

engine = QQmlApplicationEngine()
engine.quit.connect(app.quit)
engine.rootContext().setContextProperty('ProfilesModel', profilesmodel)
engine.load('/usr/share/feren-storium/modules/packagemgmt-ice/icegui.qml')

mainwnd = engine.rootObjects()[0]
mainwnd.createProfile.connect(onCreateProfile)
mainwnd.openProfile.connect(onOpenProfile)

mainwnd.setProperty('title', desktopfileinformation["name"])
mainwnd.findChild(QObject, "profilesHeader").setProperty('text', "Who's using %s?" % desktopfileinformation["name"])
mainwnd.findChild(QObject, "browsersHeader").setProperty('text', "Choose a browser to launch %s" % desktopfileinformation["name"])
mainwnd.findChild(QObject, "manageHeader").setProperty('text', "Manage %s Profiles" % desktopfileinformation["name"])

#TODO: Add in label changing to translate the labels




#If browser isn't installed, react accordingly
browserInstalled = False
for browser in browserSources[desktopfileinformation["browser"]]["required-file"]:
    if os.path.isfile(browser):
        browserInstalled = True
if browserInstalled == False:
    pass #TODO: Screen for picking browser, and error if no browsers available to switch it to

#If profiles folder doesn't exist, create it.
profilesdir = IceShared.get_profiles_folder(desktopfileinformation["id"])
if not os.path.isdir(profilesdir):
    IceShared.create_profiles_folder(desktopfileinformation["id"])

refreshProfiles()


sys.exit(app.exec())

#!/usr/bin/python3

import sys
import os
import importlib
import signal
from threading import Thread
import gi
from gi.repository import GLib
import getpass

class StoreBrainException(Exception): # Name this according to the module to allow easier debugging
    pass

#This class here is the main brains that connect the pieces of code together per each module
class StoreModuleContainer():
    def __init__(self, storebrain, path):
        self.path = path
        sys.path.insert(0, path) #Adds the module directory to the path for this class, so the next part knows where module.py is
        import module
        importlib.reload(module) #Otherwise only one module will be loaded across all variables
        #Imports the 'module.py' file of the folder
        self.main = module.main(storebrain)


class StoreBrain():
    #Load the initial modules
    def load_modules(self):
        MODULES_DIR = "/usr/lib/feren-storium/modules"
        
        #TODO: Make these lists be managed by gsettings or similar
        if os.path.exists(MODULES_DIR):
            for dir_name in sorted(os.listdir(MODULES_DIR+"/localpackagemgmt")):
                path = os.path.join(MODULES_DIR+"/localpackagemgmt", dir_name)
                try:
                    module = StoreModuleContainer(self, path)
                    self.localpkgmgmt_modules[dir_name] = module
                except Exception as e:
                    print("Failed to load local package management module %s: \n%s\n" % (dir_name, e))
            for dir_name in sorted(os.listdir(MODULES_DIR+"/packagemgmt")):
                path = os.path.join(MODULES_DIR+"/packagemgmt", dir_name)
                try:
                    module = StoreModuleContainer(self, path)
                    self.pkgmgmt_modules[dir_name] = module
                except Exception as e:
                    print("Failed to load package management module %s: \n%s\n" % (dir_name, e))
            for dir_name in sorted(os.listdir(MODULES_DIR+"/packageinfo")):
                path = os.path.join(MODULES_DIR+"/packageinfo", dir_name)
                try:
                    module = StoreModuleContainer(self, path)
                    self.pkginfo_modules[dir_name] = module
                except Exception as e:
                    print("Failed to load package information module %s: \n%s\n" % (dir_name, e))
            for dir_name in sorted(os.listdir(MODULES_DIR+"/settings")):
                path = os.path.join(MODULES_DIR+"/settings", dir_name)
                try:
                    module = StoreModuleContainer(self, path)
                    self.settings_modules[dir_name] = module
                except Exception as e:
                    print("Failed to load settings module %s: \n%s\n" % (dir_name, e))
    
    
    def __init__(self):
        self.gui_module = StoreModuleContainer(self, "/usr/lib/feren-storium/modules/gui/gtk3-demo")
        # TODO: Have it be determined by gsettings
        self.settings_gui_module = StoreModuleContainer(self, "/usr/lib/feren-storium/modules/settings-gui/gtk3-demo")
        # TODO: Have it be determined by gsettings
        self.localpkgmgmt_modules = {}
        self.pkgmgmt_modules = {}
        self.pkginfo_modules = {}
        self.settings_modules = {}
        
        self.tempdir = "/tmp/feren-storium-"+getpass.getuser()
        #Make the folder if it doesn't exist
        if not os.path.isdir(self.tempdir):
            os.mkdir(self.tempdir)
        if not os.path.isdir(self.tempdir + "/icons"):
            os.mkdir(self.tempdir + "/icons")
        
        #TODO: Remove this later on
        self.debug_module = StoreModuleContainer(self, "/usr/lib/feren-storium/modules/tempdebug")
        
        self.load_modules()
        
    
    def get_item_info(self, packagename, pkgtype=""):
        if pkgtype == "":
            #Find default package type via package-sources
            import json
            with open("/usr/share/feren-storium/curated/package-info/generic/data.json", 'r') as fp:    
                packagesources = json.loads(fp.read())
            packagetype = packagesources[packagename]["order-of-source-importance"][0]
        else:
            packagetype = pkgtype
        
        item_info = {}
        #Get information from first source that can use it
        for module in self.pkginfo_modules:
            if packagetype in self.pkginfo_modules[module].main.types_provided or "all" in self.pkginfo_modules[module].main.types_provided:
                try:
                    item_info.update(self.pkginfo_modules[module].main.getInfo(packagename, packagetype))
                except Exception as e:
                    pass
        if item_info == {}:
            raise StoreBrainException(_("No information was found for %s") % packagename)
        else:
            return item_info
    
    def set_progress(self, packagename, packagetype, value):
        self.gui_module.main.set_progress(packagename, packagetype, value)
        
    
    def package_module(self, packagetype):
        #Return the first one we find's name
        for module in self.pkgmgmt_modules:
            if packagetype in self.pkgmgmt_modules[module].main.types_managed:
                return module
        raise StoreBrainException(_("No package module was found for managing %s") % packagetype)
        
    def local_package_module(self, packagetype):
        #Return the first one we find's name
        for module in self.localpkgmgmt_modules:
            if packagetype in self.localpkgmgmt_modules[module].main.types_managed:
                return module
        raise StoreBrainException(_("No local package module was found for managing %s") % packagetype)
        
        
    def run_module(self, module):
        thread = Thread(target=self._run_module,
                        args=(module,))
        thread.daemon = True
        thread.start()

    def _run_module(self, module):
        GLib.idle_add(self.__run_module, module)
        
    def __run_module(self, module):
        module.main.init()
        
    def run(self):
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        
        self.run_module(self.debug_module)
        
        self.gui_module.main.init()
     
     
     
if __name__ == "__main__":
    app = StoreBrain()
    app.run()
    
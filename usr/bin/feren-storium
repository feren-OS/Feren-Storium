#!/usr/bin/python3

import sys
import os
import importlib
import signal
from threading import Thread
import gi
from gi.repository import GLib
import getpass
import collections.abc

class StoreBrainException(Exception): # Name this according to the module to allow easier debugging
    pass

#This class here is the main brains that connect the pieces of code together per each module
class StoreModuleContainer():
    def __init__(self, storebrain, path):
        self.path = path
        sys.path.insert(0, path) #Adds the module directory to the path for this class, so the next part knows where module.py is
        import module
        importlib.reload(module) #Otherwise only one module will be loaded across all variables
        #Imports the 'module.py' file of the folder
        self.main = module.main(storebrain)


class StoreBrain():
    #Load the initial modules
    def load_modules(self):
        MODULES_DIR = "/usr/lib/feren-storium/modules"
        
        #TODO: Make these lists be managed by gsettings or similar
        if os.path.exists(MODULES_DIR):
            for dir_name in sorted(os.listdir(MODULES_DIR+"/localpackagemgmt")):
                path = os.path.join(MODULES_DIR+"/localpackagemgmt", dir_name)
                try:
                    module = StoreModuleContainer(self, path)
                    self.localpkgmgmt_modules[dir_name] = module.main
                except Exception as e:
                    print("Failed to load local package management module %s: \n%s\n" % (dir_name, e))
            for dir_name in sorted(os.listdir(MODULES_DIR+"/packagemgmt")):
                path = os.path.join(MODULES_DIR+"/packagemgmt", dir_name)
                try:
                    module = StoreModuleContainer(self, path)
                    self.pkgmgmt_modules[dir_name] = module.main
                except Exception as e:
                    print("Failed to load package management module %s: \n%s\n" % (dir_name, e))
            for dir_name in sorted(os.listdir(MODULES_DIR+"/packageinfo")):
                path = os.path.join(MODULES_DIR+"/packageinfo", dir_name)
                try:
                    module = StoreModuleContainer(self, path)
                    self.pkginfo_modules[dir_name] = module.main
                except Exception as e:
                    print("Failed to load package information module %s: \n%s\n" % (dir_name, e))
            for dir_name in sorted(os.listdir(MODULES_DIR+"/settings")):
                path = os.path.join(MODULES_DIR+"/settings", dir_name)
                try:
                    module = StoreModuleContainer(self, path)
                    self.settings_modules[dir_name] = module.main
                except Exception as e:
                    print("Failed to load settings module %s: \n%s\n" % (dir_name, e))
    
    
    def __init__(self):
        self.gui_module = StoreModuleContainer(self, "/usr/lib/feren-storium/modules/gui/gtk3-demo").main
        # TODO: Have it be determined by gsettings
        self.settings_gui_module = StoreModuleContainer(self, "/usr/lib/feren-storium/modules/settings-gui/gtk3-demo").main
        # TODO: Have it be determined by gsettings
        self.localpkgmgmt_modules = {}
        self.pkgmgmt_modules = {}
        self.pkginfo_modules = {}
        self.settings_modules = {}
        
        self.tempdir = "/tmp/feren-storium-"+getpass.getuser()
        #Make the folder if it doesn't exist
        if not os.path.isdir(self.tempdir):
            os.mkdir(self.tempdir)
        if not os.path.isdir(self.tempdir + "/icons"):
            os.mkdir(self.tempdir + "/icons")
        
        #TODO: Remove this later on
        self.debug_module = StoreModuleContainer(self, "/usr/lib/feren-storium/modules/tempdebug").main
        
        self.load_modules()
        
        # For search and whatnot
        self.package_data_categories = self.get_items_in_all_categories()
        self.package_name_categories = {}
        for category in self.package_data_categories:
            for item in self.package_data_categories[category]:
                self.package_name_categories[item] = category
                    
        
    def item_search(self, searchterm):
        searchresults = []
        #FIXME: Is there not a more efficient way to do this?
        #First check: Is the search term literally the name of the package or the real name?
        for item in self.package_name_categories:
            if searchterm == self.get_item_info(item)["realname"]:
                searchresults.append(item)
        if searchterm in self.package_name_categories:
            searchresults.append(searchterm)
        #Second check: Do any names start with the search term?
        for item in self.package_name_categories:
            if item.startswith(searchterm) or self.get_item_info(item)["realname"].startswith(searchterm):
                searchresults.append(item)
        #Third check: Do any names contain the search term?
        for item in self.package_name_categories:
            if searchterm in item or searchterm in self.get_item_info(item)["realname"]:
                searchresults.append(item)
        #Remove duplicates from list using a python3 trick
        searchresults = list(dict.fromkeys(searchresults))
        
        return searchresults
    
    
    def dict_recurupdate(self, d, u): # I'm sure it's a recursive dictionary updater function, from what I can read of this function
        for k, v in u.items():
            if isinstance(v, collections.abc.Mapping):
                d[k] = self.dict_recurupdate(d.get(k, {}), v)
            else:
                d[k] = v
        return d
        
    
    def get_item_info(self, packagename, pkgtype=""):
        if pkgtype == "":
            #Find default package type via package-sources
            import json
            with open("/usr/share/feren-storium/curated/package-info/generic/data.json", 'r') as fp:    
                packagesources = json.loads(fp.read())
            packagetype = packagesources[packagename]["order-of-source-importance"][0]
        else:
            packagetype = pkgtype
        
        for category in self.package_data_categories:
            if packagename in self.package_data_categories[category]:
                return self.package_data_categories[category][packagename]
        
        raise StoreBrainException(_("No information was found for %s") % packagename)
    
    def set_progress(self, packagename, packagetype, value):
        self.gui_module.set_progress(packagename, packagetype, value)
        
    
    def package_module(self, packagetype):
        #Return the first one we find's name
        for module in self.pkgmgmt_modules:
            if packagetype in self.pkgmgmt_modules[module].types_managed:
                return self.pkgmgmt_modules[module]
        raise StoreBrainException(_("No package module was found for managing %s") % packagetype)
        
    def local_package_module(self, packagetype):
        #Return the first one we find's name
        for module in self.localpkgmgmt_modules:
            if packagetype in self.localpkgmgmt_modules[module].types_managed:
                return self.localpkgmgmt_modules[module]
        raise StoreBrainException(_("No local package module was found for managing %s") % packagetype)
        
    def package_info_module(self, packagetype):
        #Return the first one we find's name
        for module in self.pkginfo_modules:
            if packagetype in self.pkginfo_modules[module].types_provided:
                return self.pkginfo_modules[module]
        raise StoreBrainException(_("No package info module was found for %s") % packagetype)
    
    def get_items_in_all_categories(self, packagetype=""):
        if self.pkginfo_modules == {}:
            raise StoreBrainException(_("No package info modules are active"))
        
        overallpkginfo = {}
        jsonstorage = {}
        jsonstorage2 = {}
        
        #Get the initial pkginfo for every item from every module
        for module in self.pkginfo_modules:
            jsonstorage[module] = self.pkginfo_modules[module].getPackageJSON()
            
        #Combine entries
        for i in jsonstorage:
            #FIXME: In python3 you're meant to dict.update(newdict), but the pythonic way gets RID of our other data in the process, hence this in-house function's used instead, here
            self.dict_recurupdate(jsonstorage2, jsonstorage[i])
        jsonstorage = jsonstorage2
        
        #Now split all the listings into their respective categories
        for item in jsonstorage:
            try:
                #Add category if it's not yet in the variable
                if not jsonstorage[item]["category"] in overallpkginfo:
                    overallpkginfo[jsonstorage[item]["category"]] = {}
                #Add to the variable
                overallpkginfo[jsonstorage[item]["category"]][item] = jsonstorage[item]
            except:
                pass
        return overallpkginfo
        
    def get_items_in_categories(self, categories, packagetype=""):
        if "all" in categories:
            return self.package_data_categories
        else:
            overalldata = {}
            for category in categories:
                overalldata[category] = self.package_data_categories[category]
            return overallpkgdata
        
        
    def run_module(self, module):
        thread = Thread(target=self._run_module,
                        args=(module,))
        thread.daemon = True
        thread.start()

    def _run_module(self, module):
        GLib.idle_add(self.__run_module, module)
        
    def __run_module(self, module):
        module.init()
        
    def run(self):
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        
        self.run_module(self.debug_module)
        
        self.gui_module.init()
     
     
     
if __name__ == "__main__":
    app = StoreBrain()
    app.run()
    